Установка
Скопировать файлы на сервер.
Директория доступная по http:// - /www
Дамп базы в формате SQL
Параметры подключения к базе в файле /processes/common/Db.php
	private 		$host 		= '127.0.0.1';
	private 		$dbname 	= 'discount';
	private 		$user 		= 'root';
	private 		$password 	= '';
На *nix системах не тестировал

Архитектура
Стандартная, MVC
Файл входа - /www/index.php
Маршрутизация, ЧПУ - /processes/Start.php
контроллер, модель, вюхи - стандартно /processes/controller|models|views
Вспомогательние класы (Хелперы, базы данных, вадидация, базовый клас контроллера, трейт) - /processes/common/
темплейты - /processes/templates/
Модули - /processes/modules/
Конфигурация - /processes/config/

Как работает PHP
Работает как большинство фреймворков.
единый файл входа, где подключается конфиг, автолоад класов(PSR-4), клас маршрутизации.
В класе маршрутизации разбираем REQUEST_URI на параметры (ЧПУ), устанавливаем ограничение на урл для безопасности (если не a-z\/\- NotFound)
Подключаем контролер, результат работы MVC пишем в буфер вывода (позволяет отправлять заголовки влюбом месте контроллера, вставить результат в средину темплейта)
Дальше подключаем темплейт, который тянет нужные ему модули, вставляется результат работы MVC в темплейт из буфера и отдаём клиенту.

Ajax
Написал плагин к Jquery
На ссылку вешаем обработчик событий ($(document).on('click', '.ajax', func........))
C тега читаем атрибуты которые являются параметрами ajax-запроса, останавливаем действие по умолчанию, вызываем плагин с параметрами который отправляет запрос
Например, ссылка <a class="ajax" box="content" form="myform" effect="insert"....
отправит запрос подхватив данные с формы myform, положит ответ в контейнер с id="content" применив колбек функцию insert
На стороне сервера ядро приложения распознает ajax-запрос и отдаст голый результат MVC (без темплейта)
Скрипт читает заголовок 'HTTP_X_REQUESTED_WITH' последние данные по браузерам не смотрел, в кросбраузерности такого решения не уверен, 
можно было-бы явно ajax указывать (типа url?ajax=yes), но сделал как сделал.

По мелочам
Клас форм, валидация данных написаны на низком уровне абстракции, под задание. Можно задать тип поля (определяет внешний вид), правила валидации, name параметра.
Комбинируя этими сущностями можно при каком-то осязаемом их количестве построить обмен данными на любом приложении. Считаю такой подход имеет право на жизнь.
Клас для работы с базой данных похожий на PDO, но плейсхолдеры типизированы, не использует подготовленные запросы, можно создавать SQL конструкции SET, IN
Трейт больше для демонстрации знаний.
Реализован только минимально необходимый функционал под задание.

Про велосипед
Написал врукопашную для демонстрации знаний. Используя фреймворк это пишется в разы быстрее, но понимание того как фреймворки работают дают возможность работать с большинством из них.

что не сделано
Описание (PHPDoc) Не успел (семъя захотела отдыхать)
Тестирование в работе использовал мало, знания низкие (на уровне установки, тестирования методов без внешних ресурсов).
Поскольку задание практически все завязано на базу данных задача для меня нетривиальная.




